<!doctype html>
<html lang="en">

	<head>
		<meta charset="utf-8">

		<title>JavaScript So Easy Even a Caveman Can Do It</title>

		<meta name="description" content="A framework for easily creating beautiful presentations using HTML">
		<meta name="author" content="Hakim El Hattab">

		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

		<link rel="stylesheet" href="css/reveal.min.css">
		<link rel="stylesheet" href="css/theme/default.css" id="theme">

		<!-- For syntax highlighting -->
		<link rel="stylesheet" href="lib/css/zenburn.css">

		<link rel="stylesheet" href="css/ds.css">

		<!-- If the query includes 'print-pdf', use the PDF print sheet -->
		<script>
			document.write( '<link rel="stylesheet" href="css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );
		</script>

		<!--[if lt IE 9]>
		<script src="lib/js/html5shiv.js"></script>
		<![endif]-->
	</head>

	<body>

		<div class="reveal">

			<!-- Any section element inside of this container is displayed as a slide -->
			<div class="slides">

				<section class="title-slide">
          <div style="float: left; width: 30%">
            <img alt="" src="images/caveman2.jpg" />
          </div>
          <div style="float: right; width: 60%">
            <h1>JavaScript So Easy</h1>
            <h3>Even a Caveman Can Do It</h3>
            <p>Dan Shultz &bull; OverDrive, Inc</p>
          </div>
				</section>

        <section>
          <h2>JavaScript Easy?</h2>
          <h3>Maybe it is hard...</h3>
        </section>

        <section>
          <h2>...or just misunderstood.</h2>
          <div >
            <img alt="" src="images/23_caveman2.jpg" />
          </div>
        </section>

        <section>
          <section>
            <h2>Quiz</h2>
          </section>

          <section>
            <img alt="" src="images/javascript_1.jpg" />
          </section>

          <section>
            <pre>
              <code class="javascript">
              &gt; var foo = 1;
                function bar() {
                  if (!foo) {
                    var foo = 10;
                  }
                  console.log(foo);
                }
              &gt; bar();
                <span class="fragment fade-in">10</span>
              </code>
            </pre>
          </section>

          <section>
            <pre>
              <code class="javascript">              // What your wrote
              var foo = 1;
              function bar() {
                if (!foo) {
                  var foo = 10;
                }
                console.log(foo);
              }
              <span class="fragment fade-in">// What your really wrote
              var foo = 1;
              function bar() {
                var foo;
                if (!foo) {
                  foo = 10;
                }
                console.log(foo);
              }
              </span>
              </code>
            </pre>
          </section>

          <section>
            <img alt="" src="images/javascript_not_funny.jpg" />
          </section>

        </section>


        <section>
          <section>
            <h2>Understanding: scoping</h2>
          </section>

          <section>
            <h2>Block Level Scoping</h2>
            <pre><code class="c#">
            // c#
            if(true) {
              int foo = 15;
            }

            foo++; // compiler error
            </code></pre>
          </section>

          <section>
            <h2>Function Level Scoping</h2>
            <p>only functions create a new scope*</p>
            <pre><code class="javascript">
            &gt; var foo = 1;
              function bar() {
                if (!foo) {
                  (function () {
                    var foo = 10;
                  })();
                } 
                console.log(foo);
              }
            &gt; bar();
              <span class="fragment highlight-red">1</span>
            </code></pre>
          </section>
        </section>

        <!-- Hoisting -->
        <section>
          <section>
            <h2>Understanding: Hoisting</h2>
            <img alt="" src="images/sheepgoat.jpg" />
          </section>
          
          <section>
          	<h2>Variable Hoisting</h2>
            <pre>
              <code class="javascript">
              function () {
                foo();
                var bar = "baz";
              }

              <span class="fragment fade-in ">// is synonymous to above
              function () {
                var bar;
                foo();
                bar = "baz";
              }
              </span>
              </code>
            </pre>
          </section>

          <section>
          	<h2>Function Hoisting</h2>
          	<pre>
              <code class="javascript">
(function () {
  foo(); <span class="fragment fade-in ">// TypeError: undefined is not a function</span>
  bar(); <span class="fragment fade-in">// barrrr!</span>
  
  var foo = function () { console.log('foo!!!'); }
  function bar () { console.log('barrrr!'); }
})();
              </code>
          	</pre>
          </section>

          <section>
          	<h2>Named Function Expressions</h2>
          	<pre>
              <code class="javascript">
(function () {
  foo(); <span class="fragment fade-in ">// TypeError: undefined is not a function</span>
  bar(); <span class="fragment fade-in">// barrrr!</span>
  baz(); <span class="fragment fade-in ">// TypeError: undefined is not a function</span>
  pony(); <span class="fragment fade-in">// ReferenceError: pony is not defined</span>

  var foo = function () { console.log('foo!!!'); } 
  function bar () { console.log('barrrr!'); } 
  var baz = function pony () { console.log('ride it!'); } 

  foo(); <span class="fragment fade-in ">// foo!!!</span>
  bar(); <span class="fragment fade-in">// barrrr!</span>
  baz(); <span class="fragment fade-in ">// ride it!</span>
  pony(); <span class="fragment fade-in">// ReferenceError: pony is not defined</span>
})();
              </code>
          	</pre>
          </section>

        </section>
        <!-- end hoisting -->

        <!-- declarations gone bad -->
        <section>
          <section>
          	<h2>When scoping goes bad</h2>
          </section>

          <section>
          	<h3>Scoping Gone Bad</h3>
          	<pre>
              <code class="javascript">
  function f() { return 'global' }

  function foo(x) {
    var results = [];
    results.push(f());
    if (x) {
      function f() { return 'local' }
      results.push(f());
    }
    return results;
  }
              </code>
          	</pre>
          </section>

          <section>
          	<h3>Scoping Gone Bad</h3>
          	<pre>
              <code class="javascript">
          //chrome 23.0.x
          &gt; foo(true);
            ["local", "local"]
          &gt; foo(false);
            ["local"]
              </code>
          	</pre>
          </section>

          <section>
          	<h3>Scoping Gone Bad</h3>
          	<pre>
              <code class="javascript">
          //firefox 16.x
          &gt; foo(true);
            ["global", "local"]
          &gt; foo(false);
            ["global"]
              </code>
          	</pre>
          </section>

          <section>
          	<h3>Scoping Gone Bad</h3>
            <pre>
              <code class="javascript">
      // To avoid confusion and weird bugs...
      // use var to declare functions

      function foo() { ... }
      function bar(x) {
        var y = foo;
        if(x) {
          y = function () { ... }
        }
        y();
      }
              </code>
            </pre>
          </section>

        </section>
        <!-- end declarations gone bad -->

        <!-- start prototypes -->
				<section>
          <section>
					  <h2>Understanding: Prototypes</h2>
          </section>

          <section>
            <h3>"new" keyword</h3>
            <pre>
              <code class="javascript">
      var Animal = function Animal(name, says) {
        this.name = name;
        this.says = says;
      };

      var cat = new Animal("fluffy", "meow");

      Object.getPrototypeOf(cat); // cat.__proto__
        Animal
              </code>
            </pre>
          
          </section>

          <section>
            <h3>"prototype" Property</h3>
            <pre>
              <code class="javascript">
      Animal.prototype.speak = function speak() {
        console.log(this.name, "says", this.says);
      };
      
      var cat = new Animal("fluffy", "meow");

      &gt; cat.speak();
        fluffy says meow

      Animal.prototype.move = function move() {
        console.log(this.name, "walks");
      }

      &gt; cat.move();
        fluffy walks
              </code>
            </pre>
          
          </section>

          <section>
            <h3>Prototypes via Object.create</h3>
            <pre>
              <code class="javascript">
          &gt; var animal = Object.create(null);
          &gt; Object.getPrototypeOf(animal);
            <span class="fragment fade-in">null</span>
          <span class="fragment fade-in">
          &gt; var animal = Object.create(null);
          &gt; Object.getPrototypeOf(animal); </span>
            <span class="fragment fade-in">Object</span>

              </code>
            </pre>

            <aside class="notes">
              Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard).
            </aside>
          </section>

				</section>
        <!-- end prototypes -->

        <!-- function invocations -->
        <section>
        	<section>
        		<h2>Understanding: Function Invocations</h2>
        	</section>

          <section>
            <h3>Function.prototype.call (thisArg [ , arg1 [ , arg2, … ] ] )</h3>
          </section>

          <section>
          	<h3>Function.prototype.call</h3>
          	<pre>
              <code class="javascript">
        &gt; function hello (world) {
          console.log(this + ' says hello', world);
        }

        &gt; hello.call("dan", "world");
        <span class="fragment fade-in">dan says hello world</span>
              </code>
          	</pre>
          </section>

          <section>
          	<h3>Function.prototype.call</h3>
          	<pre>
              <code class="javascript">
        function say () {
          console.log('the', this.type, 'says', this.noise);
        }
        var cow = { type: 'cow', noise: 'moo' };

        say.call(cow); // the cow says moo
        cow.say = say;
        cow.say(); // the cow says moo
              </code>
          	</pre>
          </section>

          <section>
            <h3>Function.prototype.apply (thisArg, argArray)</h3>
          </section>

          <section>
            <h3>Function.prototype.apply</h3>
          	<pre>
              <code class="javascript">
        &gt; Math.min(1, 2, 3, 4, 5);
          1

        &gt; Math.min.apply(Math, [1, 2, 3, 4, 5]);
          1
              </code>
          	</pre>
          </section>

          <section>
          	<h3>Why This is Powerful</h3>
          	<pre>
              <code class="javascript">
_slice = [].slice;

log = function () {
  var args = _slice.call(arguments, 0);

  if (this.logPrefix) {
    args.unshift(this.logPrefix);
  }
  if (window.console &amp;&amp; typeof console.log === 'function') {
    console['log'].apply(console, args);
  }
}
              </code>
          	</pre>
          </section>

          <section>
          	<h3>function.bind - controlling "this"</h3>
          	<pre>
              <code class="javascript">
  var animal = {
    name: 'cow',
    speak: function () { console.log(this.name, 'says moo'); }
  };

  var speaker = animal.speak;
  speaker(); // undefined says moo
  <span class="fragment fade-in">
  speaker = animal.speak.bind(animal);
  speaker(); // cow says moo
  </span>
              </code>
          	</pre>
          </section>

          <section>
          	<h3>function.bind - partial application</h3>
          	<pre>
              <code class="javascript">
function buildUrl(protocol, domain, path) {
  return protocol + "://" + domain + "/" + path;
}

// instead of this
var urls = paths.map(function (path) {
  return buildUrl("http", "www.mydomain.com", path);
}

// use this
var urlBuilder = buildUrl.bind(null, "http", "www.mydomain.com");
var urls = paths.map(urlBuilder);
              </code>
          	</pre>
          </section>

        </section>
        <!-- end function invocations -->

        <!-- events -->
        <section>

          <section>
          	<h2>Embrace Eventing</h2>
          </section>

          <section>
            <h2>Pyramid of Doom</h2>
            <code class="javascript">
          (function($) {
            $(function(){
              $("button").click(function(e) {
                $.get("/test.json", function(data, textStatus, jqXHR) {
                  $(".list").each(function() {
                    $(this).click(function(e) {
                      setTimeout(function() {
                        alert("Hello World!");
                      }, 1000);
                    });
                  });
                });
              });
            });
          })(jQuery);
            </code>
          </section>

          <section>
            <img alt="" src="images/callbacks_in_your_callback.gif" />
          </section>


        	<section>
        		<h2>Using Events</h2>
            <ul>
              <li class="fragment fade-in">Models Real Life Interactions</li>
            	<li class="fragment fade-in">Promotes Decoupling</li>
            	<li class="fragment fade-in">Abstracts Implementation</li>
              <li class="fragment fade-in">Flexible </li>
            </ul>
        	</section>

          <section>
          	<h3>Global Event Bus</h3>
            <ul>
            	<li class="fragment fade-in">Necessary to facilitate communication between multiple parts of system.</li>
              <li class="fragment fade-in">
                Should only be used for "app" level concerns
                <ul class="fragment fade-in">
                	<li>Queueing</li>
                  <li>Global Failures</li>
                  <li>Routing</li>
                </ul>
              </li>
            </ul>
            <pre class="fragment fade-in">
              <code class="javascript">
  global.MyApp.on("checkOutCompleted", LetMeKnow);
              </code>
            </pre>
          </section>

          <section>
          	<h3>Namespace Events</h3>
          	<pre>
              <code class="javascript">
  button.on('click.my-name-space', onClickHandler);

  button.off('click.my-name-space');
              </code>
          	</pre>
          </section>

          <section>
          	<h3>Aggregate Events</h3>
          	<pre>
              <code class="coffeescript">
class InboxController
  constructor: (messages) -&gt;
    this._listController = new ListController(
      messages, 'message-template'
    )
    this._listController.on(
      'item-selected', this._messageSelected
    )

  _messageSelected: (message)-&gt;
    this.trigger('message-selected', message)


var inboxController = new InboxController(messages)
inboxController.on('message-selected', doSomething)
              </code>
          	</pre>
          </section> 
        </section>
        <!-- end events -->


        <!-- handling the async -->
        <section>
        	<section>
        		<h2>Handling the Async</h2>
        	</section>

          <section>
          	<h3>Callbacks - don't</h3>
          	<pre>
              <code class="javascript">
FoodService.prototype.getLunch = function (order, callback) {
  //.. go to the store
  callback("here's your lunch");
}
<span class="fragment fade-in">
// instead, maybe
FoodService.prototype.getLunch = function (order) {
  //.. go to the store
  this.trigger("hasFood", "here's your lunch");
}
              </span>
              </code>
          	</pre>

            <aside class="notes">
              This is great for partial application and function passing but not for async.

              Using an event from the prototype allows anyone to order it and someone else to easily pick it up.
              Removes dependencies and leaking of knowledge.
              If you pass the instance of the foodservice to Jane, she can place the order without having to 
              know who is picking it up or how they are picking it up.

              Downside to using an event, you have to include a fail event also
            </aside>
          </section>

          <section>
          	<h3>...or return a promise</h3>
          	<pre>
              <code class="javascript">
FoodService.prototype.getLunch = function getLunch(order) {
  var deferred = this._getLunchPromise = $.Deferred();
  //.. set off to do stuff and resolve/fail the promise later
  return deferred.promise(); 
}
              </code>
          	</pre>
          </section>
          
        </section>
        <!-- end handling async -->

        <!-- promises -->
        <section>
          <section>
          	<h2>Promises</h2>
          </section>

        	<section>
        		<h2>Promises</h2>
            <ul>
            	<li>Allow you to return a value or throw an exception without blocking</li>
            	<li class="fragment fade-in">Provides a proxy for a remote object to manage latency</li>
            	<li class="fragment fade-in">Mitigate Pyramid of Doom</li>
            </ul>
        	</section>

          <section>
          	<h3>Promises/A</h3>
          	<p>then(fulfilledHandler, errorHandler, progressHandler)</p>
          </section>

          <section>
          	<h3>Hows that help</h3>
          	<pre>
              <code class="javascript">
    step1(function (value1) {
        step2(value1, function(value2) {
            step3(value2, function(value3) {
                step4(value3, function(value4) {
                    // Do something with value4
                });
            });
        });
    });

   // With Promises
   step1.
    then(step2).
    then(step3).
    then(step4, orError);
              </code>
          	</pre>
          </section>


          <section>
          	<h3>Create a new promise with jQuery</h3>
          	<pre>
              <code class="javascript">
  function getPromise () {
    var d = $.Deferred();
    setTimeout(d.resolve, 100, "My Resolution);
    return d.promise();
  }

  getPromise().
    then(console.log) // print "My Resolution" after 100ms
              </code>
          	</pre>
          </section>

          <section>
          	<h3>jQuery Ajax</h3>
          	<pre>
              <code class="coffeescript">
    getBooks = -&gt; $.ajax(url: "api.com/books") 
    getAuthors = (books) -&gt; 
      # mapping function to match the authors to their 
      # respective books
      mapAuthorsToBooks = (authors...) -&gt;
        books[i].authro = author[0] for author, i in authors
        books

      # map each book to a new ajax request
      newPromises = books.map((b) -&gt; $.ajax(b.authorUri))

      # create a new promise with jQuery when
      return $.when.apply($, newPromises).pipe(mapBooksToAuthors);
  

              </code>
          	</pre>
          </section>

          <section>
          	<h3>jQuery Ajax</h3>
          	<pre>
              <code class="coffeescript">
    getBooks.
      then(getAuthors).
      then(doStuff, handleError);
              </code>
          	</pre>
          </section>

        </section>
        <!-- end promises -->

			</div>

		</div>

		<script src="lib/js/head.min.js"></script>
		<script src="js/reveal.min.js"></script>

		<script>

			// Full list of configuration options available here:
			// https://github.com/hakimel/reveal.js#configuration
			Reveal.initialize({
				controls: true,
				progress: true,
				history: true,
				center: true,

				theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
				transition: Reveal.getQueryHash().transition || 'default', // default/cube/page/concave/zoom/linear/none

				// Optional libraries used to extend on reveal.js
				dependencies: [
					{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
					//{ src: 'plugin/markdown/showdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					//{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
					//{ src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
					{ src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } },
          { src: '/socket.io/socket.io.js', async: true },
          { src: 'plugin/notes-server/client.js', async: true }
					//{ src: 'plugin/remotes/remotes.js', async: true, condition: function() { return !!document.body.classList; } }
				]
			});

		</script>

	</body>
</html>
